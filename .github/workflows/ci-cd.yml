name: CI/CD Pipeline - Permissioned Creation System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  PIP_CACHE_DIR: ~/.cache/pip

jobs:
  # Job 1: Code Quality and Validation
  code-quality:
    name: Code Quality & Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort mypy
    
    - name: Run linting
      run: |
        echo "üîç Running code linting..."
        
        # Black formatting check
        echo "üìù Checking code formatting with Black..."
        black --check --diff .
        
        # isort import sorting check
        echo "üì¶ Checking import sorting with isort..."
        isort --check-only --diff .
        
        # Flake8 style check
        echo "üé® Checking code style with Flake8..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type checking
      run: |
        echo "üîç Running type checking with mypy..."
        mypy core/ templates/ create_entity.py test_permissioned_system.py setup_permissioned_system.py --ignore-missing-imports
    
    - name: Validate project structure
      run: |
        echo "üèóÔ∏è Validating project structure..."
        
        # Check required directories exist
        for dir in agents tools tests/agents tests/tools core templates docs; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing required directory: $dir"
            exit 1
          fi
        done
        
        # Check required files exist
        for file in create_entity.py core/roles.py templates/agent_template.py templates/tool_template.py; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ Project structure validation passed"
    
    - name: Validate manifest files
      run: |
        echo "üìã Validating manifest files..."
        
        # Check JSON syntax
        if [ -f "agents_manifest.json" ]; then
          python -c "import json; json.load(open('agents_manifest.json'))"
          echo "‚úÖ agents_manifest.json is valid"
        fi
        
        if [ -f "tools_manifest.json" ]; then
          python -c "import json; json.load(open('tools_manifest.json'))"
          echo "‚úÖ tools_manifest.json is valid"
        fi

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Run permissioned system tests
      run: |
        echo "üß™ Running permissioned system tests..."
        python -m pytest test_permissioned_system.py -v --cov=core --cov=templates --cov-report=xml --cov-report=html
    
    - name: Run agent tests
      run: |
        echo "üß™ Running agent tests..."
        if [ -d "tests/agents" ] && [ "$(ls -A tests/agents)" ]; then
          python -m pytest tests/agents/ -v --cov=agents --cov-report=xml --cov-report=html
        else
          echo "‚ÑπÔ∏è No agent tests found"
        fi
    
    - name: Run tool tests
      run: |
        echo "üß™ Running tool tests..."
        if [ -d "tests/tools" ] && [ "$(ls -A tests/tools)" ]; then
          python -m pytest tests/tools/ -v --cov=tools --cov-report=xml --cov-report=html
        else
          echo "‚ÑπÔ∏è No tool tests found"
        fi
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Job 3: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup test environment
      run: |
        echo "üîß Setting up test environment..."
        python setup_permissioned_system.py --test-mode
    
    - name: Run integration tests
      run: |
        echo "üîó Running integration tests..."
        
        # Test agent creation workflow
        echo "üì¶ Testing agent creation..."
        python create_entity.py agent test_agent --user=test_user --role=tool_maker --description="Test agent for CI/CD"
        
        # Test tool creation workflow
        echo "üîß Testing tool creation..."
        python create_entity.py tool test_tool --user=test_user --role=agent_smith --description="Test tool for CI/CD"
        
        # Test permission enforcement
        echo "üîê Testing permission enforcement..."
        python -c "
        import sys
        sys.path.insert(0, '.')
        from core.roles import User, RoleManager
        from core.roles import PermissionError
        
        # Test unauthorized access
        try:
            user = User('unauthorized_user', 'viewer')
            rm = RoleManager()
            rm.create_agent(user, 'test_agent', 'Test')
            print('‚ùå Permission check failed')
            exit(1)
        except PermissionError:
            print('‚úÖ Permission enforcement working')
        "
        
        # Test manifest updates
        echo "üìã Testing manifest updates..."
        if [ -f "agents_manifest.json" ] && [ -f "tools_manifest.json" ]; then
          echo "‚úÖ Manifests updated correctly"
        else
          echo "‚ùå Manifest update failed"
          exit 1
        fi
    
    - name: Cleanup test files
      run: |
        echo "üßπ Cleaning up test files..."
        rm -f agents/test_agent.py tools/test_tool.py
        rm -f tests/agents/test_test_agent.py tests/tools/test_test_tool.py
        # Restore original manifests if they existed
        if [ -f "agents_manifest.json.backup" ]; then
          mv agents_manifest.json.backup agents_manifest.json
        fi
        if [ -f "tools_manifest.json.backup" ]; then
          mv tools_manifest.json.backup tools_manifest.json
        fi

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        echo "üîí Running security scan with Bandit..."
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt -o bandit-report.txt
    
    - name: Run Safety check
      run: |
        echo "üõ°Ô∏è Checking for known vulnerabilities..."
        safety check --json --output safety-report.json || true
        safety check --output safety-report.txt
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-report.txt
          safety-report.json
          safety-report.txt

  # Job 5: Documentation Check
  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check documentation completeness
      run: |
        echo "üìö Checking documentation completeness..."
        
        # Check required documentation files
        required_docs=(
          "README.md"
          "PERMISSIONED_CREATION_SYSTEM.md"
          "IMPLEMENTATION_ROADMAP.md"
          "workflow_integration_guide.md"
        )
        
        for doc in "${required_docs[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Missing required documentation: $doc"
            exit 1
          fi
          
          # Check file size (should not be empty)
          if [ ! -s "$doc" ]; then
            echo "‚ùå Documentation file is empty: $doc"
            exit 1
          fi
          
          echo "‚úÖ Found: $doc"
        done
        
        # Check for agent and tool documentation
        if [ -d "agents" ]; then
          for agent in agents/*.py; do
            if [ -f "$agent" ]; then
              agent_name=$(basename "$agent" .py)
              if [ ! -f "docs/agents/${agent_name}.md" ]; then
                echo "‚ö†Ô∏è Missing documentation for agent: $agent_name"
              fi
            fi
          done
        fi
        
        if [ -d "tools" ]; then
          for tool in tools/*.py; do
            if [ -f "$tool" ]; then
              tool_name=$(basename "$tool" .py)
              if [ ! -f "docs/tools/${tool_name}.md" ]; then
                echo "‚ö†Ô∏è Missing documentation for tool: $tool_name"
              fi
            fi
          done
        fi
        
        echo "‚úÖ Documentation check completed"

  # Job 6: Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: documentation-check
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        echo "üì¶ Building package..."
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: dist/

  # Job 7: Deploy (Staging)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        # Add your staging deployment logic here
        echo "‚úÖ Staging deployment completed"
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on staging..."
        # Add your smoke test logic here
        echo "‚úÖ Smoke tests passed"

  # Job 8: Deploy (Production)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        # Add your production deployment logic here
        echo "‚úÖ Production deployment completed"
    
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests on production..."
        # Add your smoke test logic here
        echo "‚úÖ Smoke tests passed"
    
    - name: Notify team
      run: |
        echo "üì¢ Production deployment completed successfully!"
        # Add your notification logic here (Slack, email, etc.)

  # Job 9: Performance Test (Optional)
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        echo "‚ö° Running performance tests..."
        # Add your performance test logic here
        echo "‚úÖ Performance tests completed" 