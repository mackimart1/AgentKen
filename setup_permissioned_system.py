#!/usr/bin/env python3
"""
Setup Script for Permissioned Agent/Tool Creation System

This script initializes the permissioned creation system by:
1. Creating necessary directories
2. Setting up default users and roles
3. Creating initial manifest files
4. Setting up documentation structure
"""
import json
import logging
import os
import sys

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.roles import role_manager, UserRole, create_default_admin

# Setup logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


def create_directories():
    """Create necessary directories for the system"""
    logger.info("Creating directories...")

    directories = [
        "agents",
        "tools",
        "tests",
        "tests/agents",
        "tests/tools",
        "docs",
        "templates",
    ]

    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"Created directory: {directory}")


def create_initial_manifests():
    """Create initial manifest files if they don't exist"""
    logger.info("Creating initial manifest files...")

    # Create agents manifest
    if not os.path.exists("agents_manifest.json"):
        agents_manifest = {
            "agents": [],
            "created_at": "2025-01-01T00:00:00",
            "version": "1.0.0",
            "description": "Registry of all agents in the system",
        }

        with open("agents_manifest.json", "w") as f:
            json.dump(agents_manifest, f, indent=2)
        logger.info("Created agents_manifest.json")

    # Create tools manifest
    if not os.path.exists("tools_manifest.json"):
        tools_manifest = {
            "tools": [],
            "created_at": "2025-01-01T00:00:00",
            "version": "1.0.0",
            "description": "Registry of all tools in the system",
        }

        with open("tools_manifest.json", "w") as f:
            json.dump(tools_manifest, f, indent=2)
        logger.info("Created tools_manifest.json")


def create_initial_documentation():
    """Create initial documentation files"""
    logger.info("Creating initial documentation...")

    # Create agents documentation
    agents_doc = """# Agents Documentation

This document contains information about all agents in the system.

## Overview

Agents are autonomous entities that can perform specific tasks within the system.
Each agent has defined capabilities and follows a standard workflow pattern.

## Agent List

No agents have been created yet.

---
*This documentation is automatically generated by the permissioned creation system.*
"""

    with open("docs/AGENTS.md", "w") as f:
        f.write(agents_doc)
    logger.info("Created docs/AGENTS.md")

    # Create tools documentation
    tools_doc = """# Tools Documentation

This document contains information about all tools in the system.

## Overview

Tools are utility functions that agents can use to perform specific operations.
Each tool has defined parameters and return types.

## Tool List

No tools have been created yet.

---
*This documentation is automatically generated by the permissioned creation system.*
"""

    with open("docs/TOOLS.md", "w") as f:
        f.write(tools_doc)
    logger.info("Created docs/TOOLS.md")


def setup_default_users():
    """Set up default users with appropriate roles"""
    logger.info("Setting up default users...")

    # Create default admin (this is done automatically by the system)
    admin_id = create_default_admin()
    if admin_id:
        logger.info(f"Created default admin user: {admin_id}")

    # Create example users for testing
    example_users = [
        ("agent_smith_example", UserRole.AGENT_SMITH, "Example Agent Smith"),
        ("tool_maker_example", UserRole.TOOL_MAKER, "Example Tool Maker"),
        ("viewer_example", UserRole.VIEWER, "Example Viewer"),
    ]

    for user_id, role, description in example_users:
        role_manager.set_user_role(user_id, role, created_by="setup_script")
        logger.info(f"Created {role.value} user: {user_id} ({description})")


def create_readme():
    """Create a README file for the permissioned system"""
    logger.info("Creating README for permissioned system...")

    readme_content = """# Permissioned Agent/Tool Creation System

This directory contains the permissioned creation system for agents and tools.

## Quick Start

1. **Set up users and roles:**
   ```python
   from core.roles import role_manager, UserRole
   
   # Create an agent smith
   role_manager.set_user_role("john_doe", UserRole.AGENT_SMITH)
   
   # Create a tool maker  
   role_manager.set_user_role("jane_smith", UserRole.TOOL_MAKER)
   ```

2. **Create an agent:**
   ```bash
   python create_entity.py \\
     --user-id "john_doe" \\
     --entity-type agent \\
     --name "Data Analyzer" \\
     --description "Analyzes data and generates insights" \\
     --capabilities "data_analysis" "statistics" "visualization"
   ```

3. **Create a tool:**
   ```bash
   python create_entity.py \\
     --user-id "jane_smith" \\
     --entity-type tool \\
     --name "Data Validator" \\
     --description "Validates data format and content" \\
     --parameters '{"data": "str", "format": "str"}' \\
     --return-type "bool"
   ```

## Testing

Run the test script to verify the system:

```bash
python test_permissioned_system.py
```

## Documentation

- [System Documentation](PERMISSIONED_CREATION_SYSTEM.md)
- [Agents Documentation](docs/AGENTS.md)
- [Tools Documentation](docs/TOOLS.md)

## Files

- `core/roles.py` - Role and permission management
- `templates/` - Code templates for agents and tools
- `create_entity.py` - Centralized creation system
- `test_permissioned_system.py` - Test script
- `setup_permissioned_system.py` - Setup script (this file)

## Default Users

The system creates these default users:

- `admin` - Full system access
- `agent_smith_example` - Can create agents
- `tool_maker_example` - Can create tools  
- `viewer_example` - Read-only access

## Security

- All operations require appropriate permissions
- Audit logging tracks all actions
- Role-based access control enforced
- Input validation on all parameters

For more information, see the main documentation file.
"""

    with open("README_PERMISSIONED_SYSTEM.md", "w") as f:
        f.write(readme_content)
    logger.info("Created README_PERMISSIONED_SYSTEM.md")


def verify_setup():
    """Verify that the setup was successful"""
    logger.info("Verifying setup...")

    # Check directories
    required_dirs = [
        "agents",
        "tools",
        "tests",
        "tests/agents",
        "tests/tools",
        "docs",
        "templates",
    ]
    for directory in required_dirs:
        if not os.path.exists(directory):
            logger.error(f"Directory missing: {directory}")
            return False

    # Check manifest files
    required_files = ["agents_manifest.json", "tools_manifest.json"]
    for file in required_files:
        if not os.path.exists(file):
            logger.error(f"File missing: {file}")
            return False

    # Check documentation files
    required_docs = ["docs/AGENTS.md", "docs/TOOLS.md"]
    for doc in required_docs:
        if not os.path.exists(doc):
            logger.error(f"Documentation missing: {doc}")
            return False

    # Check users
    users = role_manager.list_users()
    if not users:
        logger.error("No users created")
        return False

    logger.info("Setup verification successful!")
    return True


def main():
    """Main setup function"""
    logger.info("Setting up Permissioned Agent/Tool Creation System")
    logger.info("=" * 60)

    try:
        # Create directories
        create_directories()

        # Create initial manifests
        create_initial_manifests()

        # Create initial documentation
        create_initial_documentation()

        # Set up default users
        setup_default_users()

        # Create README
        create_readme()

        # Verify setup
        if verify_setup():
            logger.info("=" * 60)
            logger.info("Setup completed successfully!")
            logger.info("")
            logger.info("Next steps:")
            logger.info("1. Review the created files and directories")
            logger.info("2. Run: python test_permissioned_system.py")
            logger.info("3. Read: README_PERMISSIONED_SYSTEM.md")
            logger.info("4. Read: PERMISSIONED_CREATION_SYSTEM.md")
            logger.info("")
            logger.info("Default admin user: 'admin'")
            logger.info(
                "Example users: 'agent_smith_example', 'tool_maker_example', 'viewer_example'"
            )
        else:
            logger.error("Setup verification failed!")
            sys.exit(1)

    except Exception as e:
        logger.error(f"Setup failed with error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
