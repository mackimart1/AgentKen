"""
Tests for Admin Test Tool tool

Generated by the permissioned creation system.
"""

import unittest
from unittest.mock import Mock, patch
import sys
import os

# Add the parent directory to sys.path to allow imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tools.admin_test_tool import admin_test_tool, validate_admin_test_tool_input


class TestAdminTestTool(unittest.TestCase):
    """Test cases for Admin Test Tool tool"""

    def setUp(self):
        """Set up test fixtures"""
        pass

    def test_tool_creation(self):
        """Test that the tool can be created and called"""
        test_params = {"admin_param": "test_value"}

        result = admin_test_tool(**test_params)

        self.assertIsInstance(result, str)

    def test_parameter_validation(self):
        """Test parameter validation"""
        # Test valid parameters
        valid_params = {"admin_param": "test_value"}

        self.assertTrue(validate_admin_test_tool_input(**valid_params))

        # Test invalid parameters (missing required)
        invalid_params = {}
        self.assertFalse(validate_admin_test_tool_input(**invalid_params))

    def test_successful_execution(self):
        """Test successful tool execution"""
        test_params = {"admin_param": "test_value"}

        result = admin_test_tool(**test_params)

        self.assertIsInstance(result, str)
        self.assertIsNotNone(result)

    def test_error_handling(self):
        """Test error handling with invalid input"""
        # Test with empty parameters
        with self.assertRaises(ValueError):
            admin_test_tool()

        # Test with invalid parameter types
        invalid_params = {"admin_param": None}

        with self.assertRaises((ValueError, RuntimeError)):
            admin_test_tool(**invalid_params)

    def test_tool_decorator(self):
        """Test that the tool is properly decorated"""
        # Check if the tool has the expected attributes from @tool decorator
        self.assertTrue(hasattr(admin_test_tool, "name"))
        self.assertTrue(hasattr(admin_test_tool, "description"))
        self.assertTrue(hasattr(admin_test_tool, "args_schema"))

    def test_logging(self):
        """Test that the tool logs appropriately"""
        with self.assertLogs(level="INFO") as log:
            test_params = {"admin_param": "test_value"}

            admin_test_tool(**test_params)

            # Check that logs were generated
            self.assertTrue(len(log.records) > 0)

    def test_return_type(self):
        """Test that the tool returns the expected type"""
        test_params = {"admin_param": "test_value"}

        result = admin_test_tool(**test_params)

        # Check return type
        if str == "str":
            self.assertIsInstance(result, str)
        elif str == "int":
            self.assertIsInstance(result, int)
        elif str == "float":
            self.assertIsInstance(result, (int, float))
        elif str == "bool":
            self.assertIsInstance(result, bool)
        elif str == "Dict[str, Any]":
            self.assertIsInstance(result, dict)
        elif str == "List[str]":
            self.assertIsInstance(result, list)


if __name__ == "__main__":
    unittest.main()
