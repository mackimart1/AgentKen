"""
Tests for Test Data Processor agent

Generated by the permissioned creation system.
"""

import unittest
from unittest.mock import Mock, patch
import sys
import os

# Add the parent directory to sys.path to allow imports
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from agents.test_data_processor import test_data_processor


class TestTestDataProcessor(unittest.TestCase):
    """Test cases for Test Data Processor agent"""

    def setUp(self):
        """Set up test fixtures"""
        pass

    def test_agent_creation(self):
        """Test that the agent can be created and called"""
        task = "Test task for Test Data Processor"
        result = test_data_processor(task)

        self.assertIsInstance(result, dict)
        self.assertIn("status", result)
        self.assertIn("result", result)
        self.assertIn("message", result)

    def test_successful_execution(self):
        """Test successful task execution"""
        task = "Perform a simple test operation"
        result = test_data_processor(task)

        # Should return a valid response structure
        self.assertIsInstance(result, dict)
        self.assertIn("status", result)
        self.assertIn("message", result)

    def test_error_handling(self):
        """Test error handling with invalid input"""
        task = ""  # Empty task should be handled gracefully
        result = test_data_processor(task)

        self.assertIsInstance(result, dict)
        self.assertIn("status", result)
        self.assertIn("message", result)

    def test_capabilities(self):
        """Test that the agent has the expected capabilities"""
        # Test that the agent can handle tasks related to its capabilities
        capabilities = ["data_processing", "analysis", "reporting"]

        for capability in capabilities:
            task = f"Test {capability.lower()} capability"
            result = test_data_processor(task)

            self.assertIsInstance(result, dict)
            self.assertIn("status", result)

    @patch("agents.test_data_processor.utils.all_tool_functions")
    def test_tool_integration(self, mock_tools):
        """Test integration with tools"""
        # Mock available tools
        mock_tools.return_value = []

        task = "Test tool integration"
        result = test_data_processor(task)

        self.assertIsInstance(result, dict)
        self.assertIn("status", result)

    def test_memory_integration(self):
        """Test integration with memory system"""
        task = "Test memory integration"
        result = test_data_processor(task)

        self.assertIsInstance(result, dict)
        self.assertIn("status", result)


if __name__ == "__main__":
    unittest.main()
